node(run timer) js运行时
浏览器js ES + DOM + BOM
node    ES + 核心模块

node 可以做什么事情 (i/o 操作优势大)
    1 创建高性能服务器
    2 工具
    3 中间件
process 进程 buffer 缓存
进程和线程 进程>线程
进程表示一个程序，一个进程可以有多个线程
node适合I/O密集不合适CPU密集（压缩、合并、加密、解密）
   ┌───────────────────────────┐
┌─>│           timers          │
│  └─────────────┬─────────────┘
│  ┌─────────────┴─────────────┐
│  │     pending callbacks     │
│  └─────────────┬─────────────┘
│  ┌─────────────┴─────────────┐
│  │       idle, prepare       │
│  └─────────────┬─────────────┘      ┌───────────────┐
│  ┌─────────────┴─────────────┐      │   incoming:   │
│  │           poll            │<─────┤  connections, │
│  └─────────────┬─────────────┘      │   data, etc.  │
│  ┌─────────────┴─────────────┐      └───────────────┘
│  │           check           │
│  └─────────────┬─────────────┘
│  ┌─────────────┴─────────────┐
└──┤      close callbacks      │
   └───────────────────────────┘
timers(定时器)：本阶段执行已经被 setTimeout() 和 setInterval() 的调度回调函数。
Pending callbacks(待定回调)：执行延迟到下一个循环迭代的 I/O 回调。
idle, prepare：仅系统内部使用。
poll(轮询)：检索新的 I/O 事件;执行与 I/O 相关的回调（几乎所有情况下，除了关闭的回调函数，那些由计时器和 setImmediate() 调度的之外），其余情况 node 将在适当的时候在此阻塞。
check(检测)：setImmediate() 回调函数在这里执行。
close callbacks(关闭回调函数)：一些关闭的回调函数，如：socket.on('close', ...)。

1. global 常见属性
   buffer: 处理二进制数据
   process 进程 process.nextTick() nodejs 用于替换promise的方法
   clearInterval() clearTimeout setInterval setTimeout
   clearImmediate setImmediate
2. process常用属性
   platform 用户设备信息
   env   用户环境参数
   argv  运行时参数
   cwd() 当前工作路径


